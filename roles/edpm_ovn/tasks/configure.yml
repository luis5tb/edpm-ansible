---
# Copyright 2022 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Apply ovsdb configuration from configMaps
  block:
  - name: Check that config file exists
    stat:
      path: "{{ edpm_ovn_config_src }}/ovsdb-config"
    register: ovsdb_config_exists
    delegate_to: localhost
    become: false

  - name: Load ovsdb configuration from file
    ansible.builtin.include_vars:
      file: "{{ edpm_ovn_config_src }}/ovsdb-config"
      name: edpm_ovn_configmap_facts
    when:
      ovsdb_config_exists.stat.exists
    delegate_to: localhost
    become: false

  - name: Append ovsdb configMap options to external_ids
    ansible.builtin.set_fact:
      edpm_ovn_ovs_external_ids: "{{ edpm_ovn_ovs_external_ids | combine(edpm_ovn_configmap_facts|default({})) }}"

- name: Configure GW ports on chassis setting when enabled
  when: edpm_enable_chassis_gw|default(false)
  block:
    - name: Set enable-chassis-as-gw
      ansible.builtin.set_fact:
        cms_options:
          ovn-cms-options: "enable-chassis-as-gw"

    - name: Append CMS options to external_ids
      ansible.builtin.set_fact:
        edpm_ovn_ovs_external_ids: "{{ edpm_ovn_ovs_external_ids | combine(cms_options) }}"

- name: Configure hw-offload when required
  when: edpm_enable_hw_offload | default(false)
  block:
    - name: Add hw-offload if enabled
      ansible.builtin.set_fact:
        hw_offload:
          hw-offload: true

    - name: Append other_config with hw-offload
      ansible.builtin.set_fact:
        other_config: "{{ edpm_ovn_ovs_other_config | combine(hw_offload) }}"

- name: Configure OVS external_ids
  ansible.builtin.shell: >
    ovs-vsctl set open . {% for key, value in edpm_ovn_ovs_external_ids.items() %} external_ids:{{ key }}={{ value }} {% endfor %}

- name: Configure OVS other_config
  ansible.builtin.shell: >
    ovs-vsctl set open . {% for key, value in edpm_ovn_ovs_other_config.items() %} other_config:{{ key }}={{ value }} {% endfor %}

- name: Add OVS Manager
  block:
    - name: Check if OVS Manager already exists
      ansible.builtin.shell: >
        ovs-vsctl show | grep -q "Manager"
      register: ovs_manager_configured
      ignore_errors: yes
    - name: Add OVS Manager if not exists
      ansible.builtin.shell: >
        ovs-vsctl --timeout=5 --id=@manager -- create Manager target=\"ptcp:6640:127.0.0.1\" -- add Open_vSwitch . manager_options @manager
      when: ovs_manager_configured.rc == 1

- name: Configure neutron configuration files
  block:
    - name: render neutron config files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ edpm_ovn_neutron_metadata_agent_config_dir }}/{{ item.dest }}"
        setype: "container_file_t"
        mode: "0644"
      with_items:
      - {"src": "rootwrap.conf.j2", "dest": "01-rootwrap.conf"}
      - {"src": "neutron-ovn-metadata-agent.conf.j2", "dest": "01-neutron-ovn-metadata-agent.conf"}
      when: edpm_ovn_metadata_agent_enabled

    - name: discover secrets in {{ edpm_ovn_config_src }}
      ansible.builtin.find:
        paths: "{{ edpm_ovn_config_src }}"
        file_type: file
        recurse: yes
        patterns:
        - "*metadata*conf"
      register: edpm_neutron_metadata_secrets
      delegate_to: localhost
      become: false
      when: edpm_ovn_metadata_agent_enabled

    - name: flatten secrets into {{ edpm_ovn_neutron_metadata_agent_config_dir }}
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ edpm_ovn_neutron_metadata_agent_config_dir }}/{{ item.path | basename }}"
        setype: "container_file_t"
        mode: "0644"
      with_items: "{{ edpm_neutron_metadata_secrets.files }}"
      when: edpm_ovn_metadata_agent_enabled
